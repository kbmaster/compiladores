
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\006\004\000\002\002\004\000\002\006" +
    "\003\000\002\013\002\000\002\010\005\000\002\014\002" +
    "\000\002\010\005\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\011\004\000\002\011\005\000\002" +
    "\012\003\000\002\012\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\004\000\002\002\005\000" +
    "\002\002\003\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\016\004\015\013\016\023\012\026\014\032" +
    "\006\033\004\001\002\000\046\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\001\002\000\040\006\030\007\034\010" +
    "\037\011\031\012\035\013\043\015\033\016\041\017\040" +
    "\020\032\021\036\022\042\027\ufffa\030\ufffa\031\ufffa\001" +
    "\002\000\016\005\uffd8\024\uffd8\025\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\001\002\000\020\002\uffff\004\uffff\013\uffff\023" +
    "\uffff\026\uffff\032\uffff\033\uffff\001\002\000\020\002\114" +
    "\004\015\013\016\023\012\026\014\032\006\033\004\001" +
    "\002\000\004\031\ufffc\001\002\000\014\004\015\013\016" +
    "\023\012\032\006\033\004\001\002\000\014\024\063\025" +
    "\064\027\ufff9\030\ufff9\031\ufff9\001\002\000\016\004\015" +
    "\013\016\023\012\027\102\032\006\033\004\001\002\000" +
    "\014\004\015\013\016\023\012\032\006\033\004\001\002" +
    "\000\010\004\044\013\016\033\004\001\002\000\014\024" +
    "\023\025\024\027\ufff8\030\ufff8\031\ufff8\001\002\000\004" +
    "\031\ufffe\001\002\000\004\031\022\001\002\000\020\002" +
    "\ufffd\004\ufffd\013\ufffd\023\ufffd\026\ufffd\032\ufffd\033\ufffd" +
    "\001\002\000\014\004\015\013\016\023\012\032\006\033" +
    "\004\001\002\000\014\004\015\013\016\023\012\032\006" +
    "\033\004\001\002\000\016\005\uffdc\024\uffdc\025\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\001\002\000\016\005\uffda\024\uffda" +
    "\025\uffda\027\uffda\030\uffda\031\uffda\001\002\000\032\006" +
    "\030\007\034\010\037\011\031\012\035\013\043\015\033" +
    "\016\041\017\040\020\032\021\036\022\042\001\002\000" +
    "\010\004\044\013\016\033\004\001\002\000\010\004\044" +
    "\013\016\033\004\001\002\000\010\004\044\013\016\033" +
    "\004\001\002\000\010\004\044\013\016\033\004\001\002" +
    "\000\010\004\044\013\016\033\004\001\002\000\010\004" +
    "\044\013\016\033\004\001\002\000\010\004\044\013\016" +
    "\033\004\001\002\000\010\004\044\013\016\033\004\001" +
    "\002\000\010\004\044\013\016\033\004\001\002\000\010" +
    "\004\044\013\016\033\004\001\002\000\010\004\044\013" +
    "\016\033\004\001\002\000\010\004\044\013\016\033\004" +
    "\001\002\000\010\004\044\013\016\033\004\001\002\000" +
    "\046\005\ufff2\006\030\007\034\010\037\011\031\012\ufff2" +
    "\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\024\ufff2\025\ufff2\027\ufff2\030\ufff2\031\ufff2\001\002" +
    "\000\020\005\047\006\030\007\034\010\037\011\031\012" +
    "\035\013\043\001\002\000\046\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\024\uffec\025\uffec\027\uffec" +
    "\030\uffec\031\uffec\001\002\000\032\005\uffe5\006\030\007" +
    "\034\010\037\011\031\012\035\013\043\024\uffe5\025\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\001\002\000\032\005\uffe9\006" +
    "\030\007\034\010\037\011\031\012\035\013\043\024\uffe9" +
    "\025\uffe9\027\uffe9\030\uffe9\031\uffe9\001\002\000\032\005" +
    "\uffe8\006\030\007\034\010\037\011\031\012\035\013\043" +
    "\024\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8\001\002\000" +
    "\046\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\024\ufff0\025\ufff0\027\ufff0\030\ufff0\031\ufff0\001\002" +
    "\000\032\005\uffe6\006\030\007\034\010\037\011\031\012" +
    "\035\013\043\024\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\001\002\000\046\005\ufff3\006\030\007\034\010\037\011" +
    "\031\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\024\ufff3\025\ufff3\027\ufff3\030\ufff3\031" +
    "\ufff3\001\002\000\046\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\024\uffef\025\uffef\027\uffef\030\uffef" +
    "\031\uffef\001\002\000\032\005\uffea\006\030\007\034\010" +
    "\037\011\031\012\035\013\043\024\uffea\025\uffea\027\uffea" +
    "\030\uffea\031\uffea\001\002\000\032\005\uffe7\006\030\007" +
    "\034\010\037\011\031\012\035\013\043\024\uffe7\025\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\001\002\000\046\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\024\uffee\025" +
    "\uffee\027\uffee\030\uffee\031\uffee\001\002\000\046\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1" +
    "\025\ufff1\027\ufff1\030\ufff1\031\ufff1\001\002\000\014\004" +
    "\015\013\016\023\012\032\006\033\004\001\002\000\014" +
    "\004\015\013\016\023\012\032\006\033\004\001\002\000" +
    "\016\005\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\001\002\000\016\005\uffdb\024\uffdb\025\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\001\002\000\016\005\uffe1\024\uffe1\025\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\001\002\000\016\005\uffdf\024" +
    "\uffdf\025\uffdf\027\uffdf\030\uffdf\031\uffdf\001\002\000\016" +
    "\005\uffe0\024\uffe0\025\uffe0\027\uffe0\030\uffe0\031\uffe0\001" +
    "\002\000\016\005\uffde\024\uffde\025\uffde\027\uffde\030\uffde" +
    "\031\uffde\001\002\000\046\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\024\uffed\025\uffed\027\uffed\030" +
    "\uffed\031\uffed\001\002\000\010\005\100\024\063\025\064" +
    "\001\002\000\010\005\077\024\023\025\024\001\002\000" +
    "\034\005\047\006\030\007\034\010\037\011\031\012\035" +
    "\013\043\015\033\016\041\017\040\020\032\021\036\022" +
    "\042\001\002\000\016\005\uffe4\024\uffe4\025\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\001\002\000\016\005\uffd9\024\uffd9\025" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\001\002\000\006\027\104" +
    "\030\105\001\002\000\004\031\ufff7\001\002\000\006\027" +
    "\ufff5\030\ufff5\001\002\000\004\031\ufff6\001\002\000\014" +
    "\004\015\013\016\023\012\032\006\033\004\001\002\000" +
    "\006\027\ufff4\030\ufff4\001\002\000\016\005\uffe3\024\uffe3" +
    "\025\uffe3\027\uffe3\030\uffe3\031\uffe3\001\002\000\016\005" +
    "\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\001\002" +
    "\000\004\031\112\001\002\000\020\002\ufffb\004\ufffb\013" +
    "\ufffb\023\ufffb\026\ufffb\032\ufffb\033\ufffb\001\002\000\020" +
    "\002\001\004\001\013\001\023\001\026\001\032\001\033" +
    "\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\020\002\004\003\012\004\016\006\007\007" +
    "\017\010\006\011\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\004\003\012\004\016\007\017\010\112\011\010\001\001" +
    "\000\004\014\110\001\001\000\010\002\026\003\106\004" +
    "\107\001\001\000\002\001\001\000\014\002\004\003\012" +
    "\004\016\007\102\012\100\001\001\000\010\002\075\003" +
    "\073\004\074\001\001\000\004\002\072\001\001\000\002" +
    "\001\001\000\004\013\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\026\003\070\004\071\001\001" +
    "\000\010\002\026\003\024\004\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\061" +
    "\001\001\000\004\002\060\001\001\000\004\002\057\001" +
    "\001\000\004\002\056\001\001\000\004\002\055\001\001" +
    "\000\004\002\054\001\001\000\004\002\053\001\001\000" +
    "\004\002\052\001\001\000\004\002\051\001\001\000\004" +
    "\002\050\001\001\000\004\002\047\001\001\000\004\002" +
    "\044\001\001\000\004\002\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\026\003\066\004\067\001\001\000\010\002" +
    "\026\003\064\004\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\004\003\012\004" +
    "\016\007\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    	public void report_error(String message, Object info) 
	{
   
                StringBuilder m = new StringBuilder("Error");
    
	        if (info instanceof java_cup.runtime.Symbol) 
		{
                        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
                        if (s.left >= 0) {                
                                m.append(" in line "+(s.left+1));   
                
		        if (s.right >= 0)                    
                                m.append(", column "+(s.right+1));
            	}
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }
   
     public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= S Exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= Exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println(" = " + op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Exp ::= E NT$0 EOL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List opl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println(" = " + opl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Exp ::= Exp_list NT$1 EOL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List opl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= Num2NumOp 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double op = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= Bool2BoolOp 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean op = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= Num2BoolOp 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean op = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp_list ::= LBRACK RBRACK 
            {
              List RESULT =null;
		 RESULT=new ArrayList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp_list ::= LBRACK Exps RBRACK 
            {
              List RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exps ::= E 
            {
              List RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new ArrayList(); RESULT.add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exps",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exps ::= Exps COMMA E 
            {
              List RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		es.add(e); RESULT=es;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exps",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Num2NumOp ::= Num2NumOp PLUS Num2NumOp 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= n1 + n2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2NumOp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Num2NumOp ::= Num2NumOp MIN Num2NumOp 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= n1 - n2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2NumOp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Num2NumOp ::= Num2NumOp MULT Num2NumOp 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= n1 * n2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2NumOp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Num2NumOp ::= Num2NumOp DIV Num2NumOp 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= (double)(int) (n1 / n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2NumOp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Num2NumOp ::= Num2NumOp COS Num2NumOp 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= n1 / n2 ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2NumOp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Num2NumOp ::= Num2NumOp MOD Num2NumOp 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= n1 % n2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2NumOp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Num2NumOp ::= MIN Num2NumOp 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Double(0 - n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2NumOp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Num2NumOp ::= LPARENT Num2NumOp RPARENT 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2NumOp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Num2NumOp ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Double(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2NumOp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Num2BoolOp ::= Num2NumOp EQUAL Num2NumOp 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= n1.compareTo(n2)==0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2BoolOp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Num2BoolOp ::= Num2NumOp NOT_EQUAL Num2NumOp 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= n1.compareTo(n2)!=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2BoolOp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Num2BoolOp ::= Num2NumOp LESS Num2NumOp 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= n1<n2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2BoolOp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Num2BoolOp ::= Num2NumOp GREATER Num2NumOp 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= n1>n2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2BoolOp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Num2BoolOp ::= Num2NumOp LESS_EQUAL Num2NumOp 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= n1<=n2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2BoolOp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Num2BoolOp ::= Num2NumOp GREATER_EQUAL Num2NumOp 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= n1>=n2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2BoolOp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Num2BoolOp ::= LPARENT Num2BoolOp RPARENT 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num2BoolOp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Bool2BoolOp ::= NOT Bool2BoolOp 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=!b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool2BoolOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Bool2BoolOp ::= NOT Num2BoolOp 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=!b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool2BoolOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Bool2BoolOp ::= Bool2BoolOp AND Bool2BoolOp 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= b1 && b2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool2BoolOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Bool2BoolOp ::= Num2BoolOp AND Bool2BoolOp 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= b1 && b2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool2BoolOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Bool2BoolOp ::= Bool2BoolOp AND Num2BoolOp 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= b1 && b2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool2BoolOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Bool2BoolOp ::= Num2BoolOp AND Num2BoolOp 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= b1 && b2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool2BoolOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Bool2BoolOp ::= Bool2BoolOp OR Bool2BoolOp 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= b1 || b2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool2BoolOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bool2BoolOp ::= Num2BoolOp OR Bool2BoolOp 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= b1 || b2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool2BoolOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Bool2BoolOp ::= Bool2BoolOp OR Num2BoolOp 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= b1 || b2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool2BoolOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Bool2BoolOp ::= Num2BoolOp OR Num2BoolOp 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= b1 || b2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool2BoolOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Bool2BoolOp ::= LPARENT Bool2BoolOp RPARENT 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool2BoolOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Bool2BoolOp ::= BOOLEAN 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Boolean(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool2BoolOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
